# -*- coding: utf-8 -*-
"""1η Εργασία Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gF5E8myTdaJygA-dYwhOo7XakgdGwIUI
"""
#Κορωναίος Αργύριος
import pandas as pd # excel reading
import sklearn # we need this for the classifiers
import numpy as np # mathematical operators
import keras 
from sklearn.metrics import confusion_matrix,accuracy_score, precision_score, recall_score,f1_score 
import scipy as sp

data = pd.read_excel('/content/drive/MyDrive/machine learning project.xlsx')

data = data.drop('ΕΤΟΣ',axis=1)

inputData = data[data.columns[:-1]].values

outputData = data[data.columns[-1]]
outputData, levels = pd.factorize(outputData)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(inputData, outputData, random_state=0)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

"""1ο μοντέλο νευρωνικό δίκτυο"""

CustomModel = keras.models.Sequential()
CustomModel.add(keras.layers.Dense(16, input_dim=x_train.shape[1],activation='relu'))
CustomModel.add(keras.layers.Dense(32, activation='relu'))
CustomModel.add(keras.layers.Dense(64,activation='relu'))
CustomModel.add(keras.layers.Dense(2, activation='softmax'))

CustomModel.compile(optimizer='adam', loss='categorical_crossentropy',
metrics=['accuracy'])

CustomModel.fit(x_train_scaled, keras.utils.np_utils.to_categorical(y_train),epochs=100, verbose=False)

y_pred_train = CustomModel.predict(x_train_scaled)
y_pred_train = np.argmax(y_pred_train,axis=1)
y_pred_test = CustomModel.predict(x_test_scaled)
y_pred_test = np.argmax(y_pred_test,axis=1)

acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train )
rec_test = recall_score(y_test, y_pred_test )
f1_train = f1_score(y_train, y_pred_train )
f1_test = f1_score(y_test, y_pred_test )

print('Accuracy scores of ANN classifier are:','train: {:.2f}'.format(acc_train), 'and test:{:.2f}.'.format(acc_test))
print('Precision scores of ANN classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of ANN classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of ANN classifier are:','train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Confusion Matrix for the Train Set"""

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train, labels=[0,1]).ravel()
tn, fp, fn, tp

"""Confusion Matrix for the Test Set"""

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

CustomModel.save('/content/drive/MyDrive/Saves_Models/CustomModel.h5')

"""2ο μοντέλο λογιστική Παλινδρόμηση"""

from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(x_train_scaled, y_train)

y_pred_train = logreg.predict(x_train_scaled)
y_pred_test = logreg.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""3ο μοντέλο Δέντρο Απόφασης"""

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(max_depth = 6)
clf.fit(x_train_scaled, y_train)
y_pred_train = clf.predict(x_train_scaled)
y_pred_test = clf.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""4ο μοντέλο Linear Disciminat Analysis (Γραμμική Διακριτική Ανάλυση)


"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

lda = LinearDiscriminantAnalysis()
lda.fit(x_train_scaled, y_train) 
y_pred_train = lda.predict(x_train_scaled)
y_pred_test = lda.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""5o μοντέλο ταξινομητής Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train_scaled, y_train)
y_pred_train = gnb.predict(x_train_scaled)
y_pred_test = gnb.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""6o μοντέλο SVM"""

from sklearn.svm import SVC
svm = SVC()
svm.fit(x_train_scaled, y_train)
y_pred_train = svm.predict(x_train_scaled)
y_pred_test = svm.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""7o μοντέλο k-Nearest Neighbors"""

list=[3,5,7]
for k in list:
  from sklearn.neighbors import KNeighborsClassifier
  knn = KNeighborsClassifier(n_neighbors=k)
  knn.fit(x_train_scaled, y_train)
  y_pred_train = knn.predict(x_train_scaled)
  y_pred_test = knn.predict(x_test_scaled)
  tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
  print("train results for ", k ," neighors ",tn, fp, fn, tp)
  tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
  print("test results for ", k ," neighors ",tn, fp, fn, tp)

"""Τώρα κάνουμε την αλλαγή των δεδομένων με σκόπο να έχουμε αναλογία 1 προς 3."""

number_of_healthy = 0
number_of_unhealthy = 0
for i in range(y_train.shape[0]):
  if y_train.item(i)==0:
    number_of_healthy +=1
  else:
    number_of_unhealthy +=1
correct_number_of_healthy = number_of_unhealthy * 3
from random import seed, randint
number_of_data = number_of_healthy + number_of_unhealthy
x = number_of_healthy
while x > correct_number_of_healthy:
  value = randint(0,number_of_data-2)
  if y_train.item(value) == 0:
    y_train = np.delete(y_train, value,axis=0)
    x_train = np.delete(x_train, value,axis=0)
    number_of_data -=1
    number_of_healthy-=1
    x -=1

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

svm_new = SVC()
svm_new.fit(x_train_scaled, y_train)
y_pred_train = svm_new.predict(x_train_scaled)
y_pred_test = svm_new.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""Θα προσπαθήσουμε μέσω tuning να αποκτήσουμε τα καλύτερα δυνατά αποτελέσματα για το SVM"""

from sklearn.model_selection import GridSearchCV
param_grid = [
  {'C': [0.1, 1, 10, 100, 1000,10000], 'gamma': [1,0.1,0.01,0.001, 0.0001], 'kernel': ['rbf']},
 ]
clf =  GridSearchCV(svm_new,param_grid=param_grid)  
search = clf.fit(x_train,y_train)
search.best_params_

svm_tunned = search.best_estimator_

svm_tunned.fit(x_train_scaled, y_train)
y_pred_train = svm_new.predict(x_train_scaled)
y_pred_test = svm_new.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

"""2η δοκιμή με Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train_scaled, y_train)
y_pred_train = gnb.predict(x_train_scaled)
y_pred_test = gnb.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

New_Model = keras.models.Sequential()
New_Model.add(keras.layers.Dense(32, input_dim=x_train.shape[1],activation='elu'))
New_Model.add(keras.layers.Dense(64, activation='elu'))
New_Model.add(keras.layers.Dense(32, activation='elu'))
New_Model.add(keras.layers.Dense(16, activation='elu'))
New_Model.add(keras.layers.Dense(2, activation='sigmoid'))

import tensorflow as tf
New_Model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01), loss='categorical_crossentropy',metrics=['accuracy'])

New_Model.fit(x_train_scaled, keras.utils.np_utils.to_categorical(y_train),batch_size=2,epochs=60, verbose=0)

y_pred_train = New_Model.predict(x_train_scaled)
y_pred_train = np.argmax(y_pred_train,axis=1)
y_pred_test = New_Model.predict(x_test_scaled)
y_pred_test = np.argmax(y_pred_test,axis=1)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

New_Model.save('/content/drive/MyDrive/Saves_Models/New_Model/New_model.h5')

list=[3,5,7]
for k in list:
  from sklearn.neighbors import KNeighborsClassifier
  knn = KNeighborsClassifier(n_neighbors=k)
  knn.fit(x_train_scaled, y_train)
  y_pred_train = knn.predict(x_train_scaled)
  y_pred_test = knn.predict(x_test_scaled)
  tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
  print("train results for ", k ," neighors ",tn, fp, fn, tp)
  tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
  print("test results for ", k ," neighors ",tn, fp, fn, tp)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=3,metric= 'cosine',algorithm='brute')
knn.fit(x_train_scaled, y_train)
y_pred_train = knn.predict(x_train_scaled)
y_pred_test = knn.predict(x_test_scaled)
tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
print("train results for ", 3 ," neighors ",tn, fp, fn, tp)
tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
print("test results for ", 3 ," neighors ",tn, fp, fn, tp)

from sklearn.model_selection import GridSearchCV
param_grid_nb = {
    'var_smoothing': np.logspace(0,-10, num=100)
}
nbModel_grid = GridSearchCV(estimator=GaussianNB(), param_grid=param_grid_nb, verbose=1, cv=173, n_jobs=-1)
nbModel_grid.fit(x_train_scaled, y_train)
print(nbModel_grid.best_estimator_)

y_pred_train = nbModel_grid.best_estimator_.predict(x_train_scaled)
y_pred_test = nbModel_grid.best_estimator_.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp

clf = DecisionTreeClassifier(max_depth=4)
clf.fit(x_train_scaled, y_train)
y_pred_train = clf.predict(x_train_scaled)
y_pred_test = clf.predict(x_test_scaled)

tn, fp, fn, tp = confusion_matrix(y_train, y_pred_train,labels=[0,1]).ravel()
tn, fp, fn, tp

tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test,labels=[0,1]).ravel()
tn, fp, fn, tp